name: Main CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: onoureldin14
  IMAGE_NAME: simple-typescript-app

jobs:
  build-app:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      working-directory: app
      run: npm ci

    - name: Build application
      working-directory: app
      run: npm run build

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{short}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./app
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Output image info
      if: github.event_name != 'pull_request'
      run: |
        echo "‚úÖ Image built: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
        echo "üè∑Ô∏è  Tags: ${{ steps.meta.outputs.tags }}"

  deploy-infra:
    needs: build-app
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Minikube
      uses: medyagh/setup-minikube@master

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Deploy with Terraform
      working-directory: infra
      run: |
        terraform init
        terraform apply -auto-approve -var="app_version=latest"

    - name: Wait for deployment
      run: |
        kubectl wait --for=condition=ready pod -l app=simple-typescript-app --timeout=60s

    - name: Show deployment status
      run: |
        echo "=== Deployment Status ==="
        kubectl get pods
        kubectl get services
        echo ""
        echo "üåê Application accessible at: http://$(minikube ip):30000"
        echo "üìä Health check: http://$(minikube ip):30000/health"

  summary:
    needs: [build-app, deploy-infra]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
    - name: Build Summary
      if: needs.build-app.result == 'success'
      run: |
        echo "‚úÖ App build completed successfully"
        echo "üê≥ Docker image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"

    - name: Deploy Summary
      if: needs.deploy-infra.result == 'success'
      run: |
        echo "‚úÖ Infrastructure deployment completed successfully"
        echo "üöÄ Application is running on Minikube"

    - name: Failure Summary
      if: needs.build-app.result == 'failure' || needs.deploy-infra.result == 'failure'
      run: |
        echo "‚ùå Pipeline failed!"
        echo "Build status: ${{ needs.build-app.result }}"
        echo "Deploy status: ${{ needs.deploy-infra.result }}"
        exit 1
